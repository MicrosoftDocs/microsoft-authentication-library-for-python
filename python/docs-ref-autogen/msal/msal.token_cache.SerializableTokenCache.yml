### YamlMime:PythonClass
uid: msal.token_cache.SerializableTokenCache
name: SerializableTokenCache
fullName: msal.token_cache.SerializableTokenCache
module: msal.token_cache
summary: "This serialization can be a starting point to implement your own persistence.\n\
  \nThis class does NOT actually persist the cache on disk/db/etc..\nDepending on\
  \ your need,\nthe following simple recipe for file-based, unencrypted persistence\
  \ may be sufficient:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
  : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
  : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n   import\
  \ os, atexit, msal\n   cache_filename = os.path.join(  # Persist cache into this\
  \ file\n       os.getenv(\n           # Automatically wipe out the cache from Linux\
  \ when user's ssh session ends.\n           # See also https://github.com/AzureAD/microsoft-authentication-library-for-python/issues/690\n\
  \           \"XDG_RUNTIME_DIR\", \"\"),\n       \"my_cache.bin\")\n   cache = msal.SerializableTokenCache()\n\
  \   if os.path.exists(cache_filename):\n       cache.deserialize(open(cache_filename,\
  \ \"r\").read())\n   atexit.register(lambda:\n       open(cache_filename, \"w\"\
  ).write(cache.serialize())\n       # Hint: The following optional line persists\
  \ only when state changed\n       if cache.has_state_changed else None\n       )\n\
  \   app = msal.ClientApplication(..., token_cache=cache)\n   ...\n   ````\n\nAlternatively,\
  \ you may use a more sophisticated cache persistence library,\n[MSAL Extensions](https://github.com/AzureAD/microsoft-authentication-extensions-for-python),\n\
  which provides token cache persistence with encryption, and more."
constructor:
  syntax: SerializableTokenCache()
variables:
- description: 'Indicates whether the cache state in the memory has changed since
    last

    <xref:msal.token_cache.SerializableTokenCache.serialize> or <xref:msal.token_cache.SerializableTokenCache.deserialize>
    call.'
  name: has_state_changed
  types:
  - <xref:bool>
methods:
- uid: msal.token_cache.SerializableTokenCache.add
  name: add
  signature: add(event, **kwargs)
  parameters:
  - name: event
    isRequired: true
- uid: msal.token_cache.SerializableTokenCache.deserialize
  name: deserialize
  summary: Deserialize the cache from a state previously obtained by serialize()
  signature: 'deserialize(state: str | None) -> None'
  parameters:
  - name: state
    isRequired: true
- uid: msal.token_cache.SerializableTokenCache.modify
  name: modify
  signature: modify(credential_type, old_entry, new_key_value_pairs=None)
  parameters:
  - name: credential_type
    isRequired: true
  - name: old_entry
    isRequired: true
  - name: new_key_value_pairs
    defaultValue: None
- uid: msal.token_cache.SerializableTokenCache.serialize
  name: serialize
  summary: Serialize the current cache state into a string.
  signature: serialize() -> str
attributes:
- uid: msal.token_cache.SerializableTokenCache.has_state_changed
  name: has_state_changed
  signature: has_state_changed = False
