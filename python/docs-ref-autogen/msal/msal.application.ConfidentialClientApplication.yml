### YamlMime:PythonClass
uid: msal.application.ConfidentialClientApplication
name: ConfidentialClientApplication
fullName: msal.application.ConfidentialClientApplication
module: msal.application
summary: 'Same as <xref:ClientApplication.__init__>,

  except that `allow_broker` parameter shall remain `None`.


  Create an instance of application.'
constructor:
  syntax: ConfidentialClientApplication(client_id, client_credential=None, authority=None,
    validate_authority=True, token_cache=None, http_client=None, verify=True, proxies=None,
    timeout=None, client_claims=None, app_name=None, app_version=None, client_capabilities=None,
    azure_region=None, exclude_scopes=None, http_cache=None, instance_discovery=None,
    allow_broker=None, enable_pii_log=None, oidc_authority=None)
  parameters:
  - name: client_id
    description: Your app has a client_id after you register it on Microsoft Entra
      admin center.
    isRequired: true
    types:
    - <xref:str>
  - name: client_credential
    description: "For <xref:msal.application.PublicClientApplication>, you use *None*\
      \ here.\n\nFor <xref:msal.application.ConfidentialClientApplication>,\nit supports\
      \ many different input formats for different scenarios.\n\n\n\n## Support using\
      \ a client secret.Just feed in a string, such as `\"your client secret\"`.\n\
      \n\n\n## Support using a certificate in X.509 (.pem) formatFeed in a dict in\
      \ this form:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
      : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
      : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n\
      \   {\n       \"private_key\": \"...-----BEGIN PRIVATE KEY-----... in PEM format\"\
      ,\n       \"thumbprint\": \"A1B2C3D4E5F6...\",\n       \"passphrase\": \"Passphrase\
      \ if the private_key is encrypted (Optional. Added in version 1.6.0)\",\n  \
      \ }\n   ````\n\nMSAL Python requires a \"private_key\" in PEM format.\nIf your\
      \ cert is in PKCS12 (.pfx) format,\nyou can convert it to X.509 (.pem) format,\n\
      by `openssl pkcs12 -in file.pfx -out file.pem -nodes`.The thumbprint is available\
      \ in your app's registration in Azure Portal.\nAlternatively, you can [calculate\
      \ the thumbprint](https://github.com/Azure/azure-sdk-for-python/blob/07d10639d7e47f4852eaeb74aef5d569db499d6e/sdk/identity/azure-identity/azure/identity/_credentials/certificate.py#L94-L97).\n\
      \n\n\n## Support Subject Name/Issuer Auth with a cert in .pem[Subject Name/Issuer\
      \ Auth](https://github.com/AzureAD/microsoft-authentication-library-for-python/issues/60)\n\
      is an approach to allow easier certificate rotation.*Added in version 0.5.0*:\n\
      \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
      : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"default\"\
      , \"force\": false, \"linenos\": false} -->\n\n````default\n\n   {\n       \"\
      private_key\": \"...-----BEGIN PRIVATE KEY-----... in PEM format\",\n      \
      \ \"thumbprint\": \"A1B2C3D4E5F6...\",\n       \"public_certificate\": \"...-----BEGIN\
      \ CERTIFICATE-----...\",\n       \"passphrase\": \"Passphrase if the private_key\
      \ is encrypted (Optional. Added in version 1.6.0)\",\n   }\n   ````\n\n`public_certificate`\
      \ (optional) is public key certificate\nwhich will be sent through 'x5c' JWT\
      \ header only for\nsubject name and issuer authentication to support cert auto\
      \ rolls.Per [specs](https://tools.ietf.org/html/rfc7515#section-4.1.6),\n\"\
      the certificate containing\nthe public key corresponding to the key used to\
      \ digitally sign the\nJWS MUST be the first certificate.  This MAY be followed\
      \ by\nadditional certificates, with each subsequent certificate being the\n\
      one used to certify the previous one.\"\nHowever, your certificate's issuer\
      \ may use a different order.\nSo, if your attempt ends up with an error AADSTS700027\
      \ -\n\"The provided signature value did not match the expected signature value\"\
      ,\nyou may try use only the leaf cert (in PEM/str format) instead.\n\n\n\n##\
      \ Supporting raw assertion obtained from elsewhere*Added in version 1.13.0*:\n\
      It can also be a completely pre-signed assertion that you've assembled yourself.\n\
      Simply pass a container containing only the key \"client_assertion\", like this:\n\
      \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
      : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"default\"\
      , \"force\": false, \"linenos\": false} -->\n\n````default\n\n   {\n       \"\
      client_assertion\": \"...a JWT with claims aud, exp, iss, jti, nbf, and sub...\"\
      \n   }\n   ````\n\n\n\n## Supporting reading client cerficates from PFX files*Added\
      \ in version 1.29.0*:\nFeed in a dictionary containing the path to a PFX file:\n\
      \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
      : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"default\"\
      , \"force\": false, \"linenos\": false} -->\n\n````default\n\n   {\n       \"\
      private_key_pfx_path\": \"/path/to/your.pfx\",\n       \"passphrase\": \"Passphrase\
      \ if the private_key is encrypted (Optional)\",\n   }\n   ````\n\nThe following\
      \ command will generate a .pfx file from your .key and .pem file:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"language\": \"default\", \"force\": false,\
      \ \"linenos\": false} -->\n\n````default\n\n   openssl pkcs12 -export -out certificate.pfx\
      \ -inkey privateKey.key -in certificate.pem\n   ````\n\n\n\n## Support Subject\
      \ Name/Issuer Auth with a cert in .pfx*Added in version 1.30.0*:\nIf your .pfx\
      \ file contains both the private key and public cert,\nyou can opt in for Subject\
      \ Name/Issuer Auth like this:\n\n<!-- literal_block {\"ids\": [], \"classes\"\
      : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
      , \"language\": \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\
      \n   {\n       \"private_key_pfx_path\": \"/path/to/your.pfx\",\n       \"public_certificate\"\
      : True,\n       \"passphrase\": \"Passphrase if the private_key is encrypted\
      \ (Optional)\",\n   }\n   ````"
    defaultValue: None
    types:
    - <xref:typing.Union>[<xref:dict>, <xref:str>, <xref:None>]
  - name: client_claims
    description: "*Added in version 0.5.0*:\nIt is a dictionary of extra claims that\
      \ would be signed by\nby this <xref:msal.application.ConfidentialClientApplication>\
      \ 's private key.\nFor example, you can use {\"client_ip\": \"x.x.x.x\"}.\n\
      You may also override any of the following default claims:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"language\": \"default\", \"force\": false,\
      \ \"linenos\": false} -->\n\n````default\n\n   {\n       \"aud\": the_token_endpoint,\n\
      \       \"iss\": self.client_id,\n       \"sub\": same_as_issuer,\n       \"\
      exp\": now + 10_min,\n       \"iat\": now,\n       \"jti\": a_random_uuid\n\
      \   }\n   ````"
    defaultValue: None
    types:
    - <xref:dict>
  - name: authority
    description: "A URL that identifies a token authority. It should be of the format\n\
      `https://login.microsoftonline.com/your_tenant`\nBy default, we will use `https://login.microsoftonline.com/common`\n\
      \n*Changed in version 1.17*: you can also use predefined constant\nand a builder\
      \ like this:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
      : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
      : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n\
      \   from msal.authority import (\n       AuthorityBuilder,\n       AZURE_US_GOVERNMENT,\
      \ AZURE_CHINA, AZURE_PUBLIC)\n   my_authority = AuthorityBuilder(AZURE_PUBLIC,\
      \ \"contoso.onmicrosoft.com\")\n   # Now you get an equivalent of\n   # \"https://login.microsoftonline.com/contoso.onmicrosoft.com\"\
      \n\n   # You can feed such an authority to msal's ClientApplication\n   from\
      \ msal import PublicClientApplication\n   app = PublicClientApplication(\"my_client_id\"\
      , authority=my_authority, ...)\n   ````"
    defaultValue: None
    types:
    - <xref:str>
  - name: validate_authority
    description: '(optional) Turns authority validation

      on or off. This parameter default to true.'
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: token_cache
    description: 'Sets the token cache used by this ClientApplication instance.

      By default, an in-memory cache will be created and used.'
    defaultValue: None
    types:
    - <xref:msal.token_cache.TokenCache>
  - name: http_client
    description: '(optional)

      Your implementation of abstract class HttpClient <msal.oauth2cli.http.http_client>

      Defaults to a requests session instance.

      Since MSAL 1.11.0, the default session would be configured

      to attempt one retry on connection error.

      If you are providing your own http_client,

      it will be your http_client''s duty to decide whether to perform retry.'
    defaultValue: None
  - name: verify
    description: '(optional)

      It will be passed to the

      [verify parameter in the underlying requests library](http://docs.python-requests.org/en/v2.9.1/user/advanced/#ssl-cert-verification)

      This does not apply if you have chosen to pass your own Http client'
    defaultValue: 'True'
  - name: proxies
    description: '(optional)

      It will be passed to the

      [proxies parameter in the underlying requests library](http://docs.python-requests.org/en/v2.9.1/user/advanced/#proxies)

      This does not apply if you have chosen to pass your own Http client'
    defaultValue: None
  - name: timeout
    description: '(optional)

      It will be passed to the

      [timeout parameter in the underlying requests library](http://docs.python-requests.org/en/v2.9.1/user/advanced/#timeouts)

      This does not apply if you have chosen to pass your own Http client'
    defaultValue: None
  - name: app_name
    description: '(optional)

      You can provide your application name for Microsoft telemetry purposes.

      Default value is None, means it will not be passed to Microsoft.'
    defaultValue: None
  - name: app_version
    description: '(optional)

      You can provide your application version for Microsoft telemetry purposes.

      Default value is None, means it will not be passed to Microsoft.'
    defaultValue: None
  - name: client_capabilities
    description: '(optional)

      Allows configuration of one or more client capabilities, e.g. ["CP1"].


      Client capability is meant to inform the Microsoft identity platform

      (STS) what this client is capable for,

      so STS can decide to turn on certain features.

      For example, if client is capable to handle *claims challenge*,

      STS may issue

      [Continuous Access Evaluation (CAE)](https://learn.microsoft.com/entra/identity/conditional-access/concept-continuous-access-evaluation)

      access tokens to resources,

      knowing that when the resource emits a *claims challenge*

      the client will be able to handle those challenges.


      Implementation details:

      Client capability is implemented using "claims" parameter on the wire,

      for now.

      MSAL will combine them into

      [claims parameter](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter)

      which you will later provide via one of the acquire-token request.'
    defaultValue: None
    types:
    - <xref:list>[<xref:str>]
  - name: azure_region
    description: "(optional)\nInstructs MSAL to use the Entra regional token service.\
      \ This legacy feature is only available to\nfirst-party applications. Only `acquire_token_for_client()`\
      \ is supported.\n\nSupports 3 values:\n\n   `azure_region=None` - meaning no\
      \ region is used. This is the default value.\n   `azure_region=\"some_region\"\
      ` - meaning the specified region is used.\n   `azure_region=True` - meaning\
      \ MSAL will try to auto-detect the region. This is not recommended.\n\n\n> [!NOTE]\n\
      > Region auto-discovery has been tested on VMs and on Azure Functions. It is\
      \ unreliable.\n>\n> Applications using this option should configure a short\
      \ timeout.\n>\n> \n>\n> For more details and for the values of the region string\n\
      >\n> \n>\n> see [https://learn.microsoft.com/entra/msal/dotnet/resources/region-discovery-troubleshooting](https://learn.microsoft.com/entra/msal/dotnet/resources/region-discovery-troubleshooting)\n\
      >\n\nNew in version 1.12.0."
    defaultValue: None
    types:
    - <xref:str>
  - name: exclude_scopes
    description: '(optional)

      Historically MSAL hardcodes *offline_access* scope,

      which would allow your app to have prolonged access to user''s data.

      If that is unnecessary or undesirable for your app,

      now you can use this parameter to supply an exclusion list of scopes,

      such as `exclude_scopes = ["offline_access"]`.'
    defaultValue: None
    types:
    - <xref:list>[<xref:str>]
  - name: http_cache
    description: "MSAL has long been caching tokens in the `token_cache`.\nRecently,\
      \ MSAL also introduced a concept of `http_cache`,\nby automatically caching\
      \ some finite amount of non-token http responses,\nso that *long-lived*\n`PublicClientApplication`\
      \ and `ConfidentialClientApplication`\nwould be more performant and responsive\
      \ in some situations.\n\nThis `http_cache` parameter accepts any dict-like object.\n\
      If not provided, MSAL will use an in-memory dict.\n\nIf your app is a command-line\
      \ app (CLI),\nyou would want to persist your http_cache across different CLI\
      \ runs.\nThe following recipe shows a way to do so:\n\n<!-- literal_block {\"\
      ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
      \ \"xml:space\": \"preserve\", \"language\": \"default\", \"force\": false,\
      \ \"linenos\": false} -->\n\n````default\n\n   # Just add the following lines\
      \ at the beginning of your CLI script\n   import sys, atexit, pickle\n   http_cache_filename\
      \ = sys.argv[0] + \".http_cache\"\n   try:\n       with open(http_cache_filename,\
      \ \"rb\") as f:\n           persisted_http_cache = pickle.load(f)  # Take a\
      \ snapshot\n   except (\n           FileNotFoundError,  # Or IOError in Python\
      \ 2\n           pickle.UnpicklingError,  # A corrupted http cache file\n   \
      \        ):\n       persisted_http_cache = {}  # Recover by starting afresh\n\
      \   atexit.register(lambda: pickle.dump(\n       # When exit, flush it back\
      \ to the file.\n       # It may occasionally overwrite another process's concurrent\
      \ write,\n       # but that is fine. Subsequent runs will reach eventual consistency.\n\
      \       persisted_http_cache, open(http_cache_file, \"wb\")))\n\n   # And then\
      \ you can implement your app as you normally would\n   app = msal.PublicClientApplication(\n\
      \       \"your_client_id\",\n       ...,\n       http_cache=persisted_http_cache,\
      \  # Utilize persisted_http_cache\n       ...,\n       #token_cache=...,  #\
      \ You may combine the old token_cache trick\n           # Please refer to token_cache\
      \ recipe at\n           # https://msal-python.readthedocs.io/en/latest/#msal.SerializableTokenCache\n\
      \       )\n   app.acquire_token_interactive([\"your\", \"scope\"], ...)\n  \
      \ ````\n\nContent inside `http_cache` are cheap to obtain.\nThere is no need\
      \ to share them among different apps.\n\nContent inside `http_cache` will contain\
      \ no tokens nor\nPersonally Identifiable Information (PII). Encryption is unnecessary.\n\
      \nNew in version 1.16.0."
    defaultValue: None
    types:
    - <xref:dict>
  - name: instance_discovery
    description: "Historically, MSAL would connect to a central endpoint located at\n\
      `https://login.microsoftonline.com` to acquire some metadata,\nespecially when\
      \ using an unfamiliar authority.\nThis behavior is known as Instance Discovery.\n\
      \nThis parameter defaults to None, which enables the Instance Discovery.\n\n\
      If you know some authorities which you allow MSAL to operate with as-is,\nwithout\
      \ involving any Instance Discovery, the recommended pattern is:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"language\": \"default\", \"force\": false,\
      \ \"linenos\": false} -->\n\n````default\n\n   known_authorities = frozenset([\
      \  # Treat your known authorities as const\n       \"https://contoso.com/adfs\"\
      , \"https://login.azs/foo\"])\n   ...\n   authority = \"https://contoso.com/adfs\"\
      \  # Assuming your app will use this\n   app1 = PublicClientApplication(\n \
      \      \"client_id\",\n       authority=authority,\n       # Conditionally disable\
      \ Instance Discovery for known authorities\n       instance_discovery=authority\
      \ not in known_authorities,\n       )\n   ````\n\nIf you do not know some authorities\
      \ beforehand,\nyet still want MSAL to accept any authority that you will provide,\n\
      you can use a `False` to unconditionally disable Instance Discovery.\n\nNew\
      \ in version 1.19.0."
    defaultValue: None
    types:
    - <xref:boolean>
  - name: allow_broker
    description: Deprecated. Please use `enable_broker_on_windows` instead.
    defaultValue: None
    types:
    - <xref:boolean>
  - name: enable_pii_log
    description: 'When enabled, logs may include PII (Personal Identifiable Information).

      This can be useful in troubleshooting broker behaviors.

      The default behavior is False.


      New in version 1.24.0.'
    defaultValue: None
    types:
    - <xref:boolean>
  - name: oidc_authority
    description: '*Added in version 1.28.0*:

      It is a URL that identifies an OpenID Connect (OIDC) authority of

      the format `https://contoso.com/tenant`.

      MSAL will append ".well-known/openid-configuration" to the authority

      and retrieve the OIDC metadata from there, to figure out the endpoints.


      Note: Broker will NOT be used for OIDC authority.'
    defaultValue: None
    types:
    - <xref:str>
methods:
- uid: msal.application.ConfidentialClientApplication.acquire_token_for_client
  name: acquire_token_for_client
  summary: 'Acquires token for the current confidential client, not for an end user.


    Since MSAL Python 1.23, it will automatically look for token from cache,

    and only send request to Identity Provider when cache misses.'
  signature: acquire_token_for_client(scopes, claims_challenge=None, **kwargs)
  parameters:
  - name: scopes
    description: '(Required)

      Scopes requested to access a protected API (a resource).'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    defaultValue: None
  return:
    description: "A dict representing the json response from Microsoft Entra:\n\n\
      * A successful response would contain \"access_token\" key, \n\n* an error response\
      \ would contain \"error\" and usually \"error_description\"."
- uid: msal.application.ConfidentialClientApplication.acquire_token_on_behalf_of
  name: acquire_token_on_behalf_of
  summary: 'Acquires token using on-behalf-of (OBO) flow.


    The current app is a middle-tier service which was called with a token

    representing an end user.

    The current app can use such token (a.k.a. a user assertion) to request

    another token to access downstream web API, on behalf of that user.

    See [detail docs here](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)
    .


    The current middle-tier app has no user interaction to obtain consent.

    See how to gain consent upfront for your middle-tier app from this article.

    [https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application)'
  signature: acquire_token_on_behalf_of(user_assertion, scopes, claims_challenge=None,
    **kwargs)
  parameters:
  - name: user_assertion
    description: The incoming token already received by this app
    isRequired: true
    types:
    - <xref:str>
  - name: scopes
    description: Scopes required by downstream API (a resource).
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    defaultValue: None
  return:
    description: "A dict representing the json response from Microsoft Entra:\n\n\
      * A successful response would contain \"access_token\" key, \n\n* an error response\
      \ would contain \"error\" and usually \"error_description\"."
- uid: msal.application.ConfidentialClientApplication.remove_tokens_for_client
  name: remove_tokens_for_client
  summary: 'Remove all tokens that were previously acquired via

    <xref:msal.application.ConfidentialClientApplication.acquire_token_for_client>
    for the current client.'
  signature: remove_tokens_for_client()
